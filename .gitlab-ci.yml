default:
    image: python:3.7-buster 

before_script:
  # Install ssh-agent if not already installed, it is required by Docker.
  # (change apt-get to yum if you use a CentOS-based image)
  - apt-get update -y
  - apt-get install -y git locales openssh-client
  - locale-gen "en_US.UTF-8"
  - locale-gen "en_GB.UTF-8"

  # Run ssh-agent (inside the build environment)
  - eval $(ssh-agent -s)

  # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  - bash -c "ssh-add <(echo '$SSH_PRIVATE_KEY')"
  - bash -c "ssh-add <(echo '$SSH_REPO_KEY')"


  # For Docker builds disable host key checking. Be aware that by adding that
  # you are suspectible to man-in-the-middle attacks.
  # WARNING: Use this only with the Docker executor, if you use it with shell
  # you will overwrite your user's SSH config.
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  # In order to properly check the server's host key, assuming you created the
  # SSH_SERVER_HOSTKEYS variable previously, uncomment the following two lines
  # instead.
  # - mkdir -p ~/.ssh
  # - '[[ -f /.dockerenv ]] && echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
  - mkdir -p ~/.pip
  - echo "$PIP_CONF" > ~/.pip/pip.conf

stages:
  - test
  - deploy

python:
  stage: test
  script:
    - apt-get update -qq && apt-get install -y -qq tox
    - tox -e cov-init,py3,cov-report
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    paths:
      - coverage_html_report
    expire_in: 1 day

deploy_production:
  stage: deploy
  script:
    - python3 -m pip install -U twine
    - python3 setup.py sdist bdist_wheel
    # Upload to the public PyPI index - assumes env variable TWINE_PASSWORD
    # is set to the API token
    - TWINE_USERNAME=__token__ python -m twine upload dist/*
  only:
    - master

pages:  
  stage: test
  script:
  - cd docs
  - pip install -r requirements.txt
  - ./generate_docs.sh
  artifacts:
    paths:
    - docs/_build

